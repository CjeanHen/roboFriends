{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","value","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onSearchChange","onRequestRobots","useSelector","searchRobots","requestRobots","isPending","dispatch","useDispatch","useEffect","fetch","then","res","json","users","payload","catch","filteredRobots","filter","robot","toLowerCase","includes","event","text","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3d9f064.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{ name }</h2>\n      <p>{ email }</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n return (\n   <>\n   {\n   robots.map((user, i) => {\n       return (\n         <Card\n           key={robots[i].id}\n           name={robots[i].name}\n           id={robots[i].id}\n           email={robots[i].email}\n         />\n       )\n     })\n   }\n  </>\n )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className='pa2'>\n    <input\n      className='pa3 ba b--green bg-lightest-blue'\n      type='search'\n      placeholder='search robots'\n      onChange={searchChange}\n      value={searchField}\n    />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border:'1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super()\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    const { hasError } = this.state\n    return hasError ? <h1>Oooooops. That's embarrassing</h1> : this.props.children\n  }\n}\n\nexport default ErrorBoundry\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nfunction App({ onSearchChange, onRequestRobots, }) {\n\n  const searchField = useSelector(state => state.searchRobots.searchField)\n  const robots = useSelector(state => state.requestRobots.robots)\n  const isPending = useSelector(state => state.requestRobots.isPending)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => dispatch(requestRobots(dispatch)), [])\n\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n\n  return isPending ?\n  <h1>Loading...</h1> :\n  (\n    <div className='tc'>\n      <h1 className='f1'>RoboFriends</h1>\n      <SearchBox\n        searchChange={event => dispatch(setSearchField(event.target.value))}\n        searchField={searchField}\n      />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  )\n}\n\nexport default App\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  error: '',\n  robots: []\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state\n  }\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { isPending: false, error: action.payload })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { isPending: false, robots: action.payload })\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons';\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}